param
(
    [String[]] [Parameter(Mandatory = $true)]$ListOfQAAnalysts,
    

    [String] [Parameter(Mandatory = $true)]$APIusername,
    [String] [Parameter(Mandatory = $true)]$APIpassword
)

#This will make a call to the Role API
    function makeRoleAPIResponse($username){
    
    try{ #check to see if a username has a co.multnomah.or.us domain email.
       $roleAPILookupPath = "/roles/api/v1/User/" + $username+"@co.multnomah.or.us"
       $roleFullPath = $identityserverURL +$roleAPILookupPath
       $roleResp = Invoke-RestMethod -Headers $headers -Method Get -Uri $roleFullPath 
       return $roleResp
       }
    catch
        {
        try{ #if a user does not have first domain email, test to see if username has a mcso.us domain email.
           $roleAPILookupPath = "/roles/api/v1/User/" + $username+"@mcso.us"
           $roleFullPath = $identityserverURL +$roleAPILookupPath
           $roleResp = Invoke-RestMethod -Headers $headers -Method Get -Uri $roleFullPath 
           return $roleResp
           }
           catch{ #if the user does not have either of the first two emails, test to see if username has a mcda domain email.
                try{
                   $roleAPILookupPath = "/roles/api/v1/User/" + $username+"@mcda.us"
                   $roleFullPath = $identityserverURL +$roleAPILookupPath
                   $roleResp = Invoke-RestMethod -Headers $headers -Method Get -Uri $roleFullPath 
                   return $roleResp
                   }
                   catch{ #Throw error that usernames has no domain email for all three of these email types.
                        write-Error("Could not find domain email for "+$username+"@co.multnomah.or.us  
                        or "+$username+"@mcso.us 
                        or "+$username+"@mcda.us.  Error code: "+$_)
                        }
                 }
           }
        }

#These will be the parameters needed to make API calls.
$identityserverURL = "https://mc-enterprise-ocelot-prd.azurewebsites.net"
$workerAPILookupPath = "/workers/api/v1/Worker/DepartmentAndOrDivisionId?divisionId=65725"
$granttype = "client_credentials"
$pair = "$($APIusername):$($APIpassword)"
$encodedCredentials = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($pair))
$headers = @{ Authorization = "Basic $encodedCredentials" }

$ListOfQAAnalystsFound = $false;
$NumberofAQAnalystsValidated = 0;

$QAAnalystValidIDs = 6405, #Development Analyst
                     6406  #Development Analyst Senior
<#
    Write-Output("---------------------------------------------------")
    Write-Output("VALID WORKER API NAMES:")
    #Display all valid people for project requester from worker API
    For($i=0; $i -lt $workerResp.Length;$i++)
    {
        $preferredName = $workerResp.preferredFirstName[$i]+" "+$workerResp.legalLastName[$i]
        if($QAAnalystValidIDs -contains $WorkerResp.jobCode[$i])
        {
            write-output($preferredName)
        }
    }
    Write-Output("---------------------------------------------------")#>

    For($i=0; $i -lt $workerResp.Length;$i++) #Goes through each name until it finds one of the parameter names.
    {
            #construct two names for comparison.
        $legalName = $workerResp.legalFirstName[$i]+" "+$workerResp.legalLastName[$i]
        $preferredName = $workerResp.preferredFirstName[$i]+" "+$workerResp.legalLastName[$i]

            #This is checked through a job code from worker API rather than a group in role API since there is not QA group in role API.
        for($q =0; $q -lt $ListOfQAAnalysts.Length;$q++)
        {
            if(($ListOfQAAnalysts[$q] -eq $legalName)-or ($ListOfQAAnalysts[$q] -eq $preferredName))
            {
                $ListOfQAAnalystsFound = $true
                #write-output("Name: "+$ListOfQAAnalysts[$q]+". Testing job code: "+$workerResp[$i].jobCode+" for QA Analyst.") 
                if($workerResp.divisionID[$i] -eq 65725 -and ($QAAnalystValidIDs -contains $workerResp[$i].jobCode))
                {
                    write-output($ListOfQAAnalysts[$q]+" is validated as a qa analyst!")
                    $NumberofAQAnalystsValidated = $NumberofAQAnalystsValidated + 1
                    break
                }
                else
                {
                    Write-Error($ListOfQAAnalysts[$q]+" DOES NOT HAVE AUTHORITY TO BE A QA ANALYST!")
                    break
                }
            }
        }
    }

    if($ListOfQAAnalystsFound -eq $false)
    {
        Write-Error("LIST OF QA ANALYSTS NOT FOUND!")
    }
    if($NumberofAQAnalystsValidated -ne $ListOfQAAnalysts.Length)
    {
        Write-Error("At least one member of the QA Analyst list is not validated!")
    }